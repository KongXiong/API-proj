@model IEnumerable<API_Proj.Models.Revenue>

@{
    ViewBag.Title = "Index";
}

<h2>Index</h2>

<p>
    @Html.ActionLink("Create New", "Create")
</p>
<table class="table">
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.Client.Firstname)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.RegisteredUser.Firstname)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Total)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Date)
        </th>
        <th></th>
    </tr>

@foreach (var item in Model) {
    <tr>
        <td>
            @Html.DisplayFor(modelItem => item.Client.Firstname)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.RegisteredUser.Firstname)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Total)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Date)
        </td>
        <td>
            @Html.ActionLink("Edit", "Edit", new { id=item.ID }) |
            @Html.ActionLink("Details", "Details", new { id=item.ID }) |
            @Html.ActionLink("Delete", "Delete", new { id=item.ID })
        </td>
    </tr>
}

</table>
@*@{
   
    var result = ViewBag.intArray;
    string test = "";

    for (int i = 0; i < Model; i++)
    {
        if (i == 0)
        {
            test = test + result[i].ToString();
        }
        else
        {
            test = test + "," + result[i].ToString();
        }
    }

}*@
<canvas id="myChart" width="800" height="400"></canvas>
<script>
    var result = @Html.Raw(Json.Encode(Model));
    //var resultsArray = result.split(',');
    //var context = $("#myChart").get(0).getContext("2d");
    var data = {
        labels: ["January", "February", "March", "April", "May", "June", "July"],

        datasets: [{

            label: "My First dataset",
            fillColor: "rgba(220,220,220,0,2)",
            strokeColor: "rgba(220,220,220,1)",
            pointColor: "rgba(220,220,220,1)",
            pointStrokeColor: "#fff",
            pointHighlightFill: "#fff",
            pointHighlightStroke: "rgba(220,220,220,1)",
            data: result

        }]
    }

    var options = {
        ///Boolean - Whether grid lines are shown across the chart
        scaleShowGridLines: false,
        //String - Colour of the grid lines
        scaleGridLineColor: "rgba(0,0,0,.05)",
        //Number - Width of the grid lines
        scaleGridLineWidth: 1,
        //Boolean - Whether the line is curved between points
        bezierCurve: true,
        //Number - Tension of the bezier curve between points
        bezierCurveTension: 0.4,
        //Boolean - Whether to show a dot for each point
        pointDot: true,
        //Number - Radius of each point dot in pixels
        pointDotRadius: 4,
        //Number - Pixel width of point dot stroke
        pointDotStrokeWidth: 1,
        //Number - amount extra to add to the radius to cater for hit detection outside the drawn point
        pointHitDetectionRadius: 20,
        //Boolean - Whether to show a stroke for datasets
        datasetStroke: true,
        //Number - Pixel width of dataset stroke
        datasetStrokeWidth: 2,
        //Boolean - Whether to fill the dataset with a colour
        datasetFill: true,

    }
    var myLineChart = new Chart(context).Line(data, options)
</script>
